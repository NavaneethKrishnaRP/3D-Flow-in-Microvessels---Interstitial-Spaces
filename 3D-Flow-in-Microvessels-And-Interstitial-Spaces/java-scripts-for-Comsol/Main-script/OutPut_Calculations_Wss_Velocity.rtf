{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red21\green111\blue77;\red0\green0\blue0;\red43\green43\blue43;
\red33\green66\blue136;\red205\green77\blue53;\red14\green70\blue135;\red26\green51\blue103;}
{\*\expandedcolortbl;;\cssrgb\c6667\c50196\c37647;\cssrgb\c0\c0\c0;\cssrgb\c22353\c22353\c22353;
\cssrgb\c16863\c34118\c60392;\cssrgb\c84706\c38824\c26667;\cssrgb\c4314\c35294\c60000;\cssrgb\c13333\c27059\c47843;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 \expnd0\expndtw0\kerning0
//Use below code to extract average axial velocity in each vessel and store in a table
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\sa213\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 // Store output lines
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f0\fs17\fsmilli8667 \cf3 java.util.List\cf4 <\cf3 String\cf4 >\cf3  exportLines \cf4 =\cf3  
\f2\b \cf5 new
\f0\b0 \cf3  java.util.ArrayList\cf4 <\cf3 String\cf4 >\cf3 ();
\f1\fs32 \

\f0\fs17\fsmilli8667 exportLines.add(\cf6 "LineIndex,Average_fp.U"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // import the same csv file used to create the network
\f1\fs32 \cf3 \

\f3\i\fs17\fsmilli8667 \cf7 importFile
\f0\i0 \cf3 (\cf6 "file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 String[][] D \cf4 =\cf3  
\f3\i \cf7 readCSVFile
\f0\i0 \cf3 (\cf6 "upload:///file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf8 int
\f0\b0 \cf3  i \cf4 =\cf3  0;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // Clear previous CutLine and Eval features
\f1\fs32 \cf3 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (String tag : model.result().dataset().tags()) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (tag.startsWith(\cf6 "cln"\cf3 )) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 model.result().dataset().remove(tag);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (String tag : model.result().numerical().tags()) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (tag.startsWith(\cf6 "evfpU"\cf3 )) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 model.result().numerical().remove(tag);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 model.result().table().create(\cf6 "tbl1"\cf3 , \cf6 "Table"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // Loop through all axis lines (D.length)
\f1\fs32 \cf3 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (
\f2\b \cf8 int
\f0\b0 \cf3  k \cf4 =\cf3  0; k \cf4 <\cf3  D.length; k\cf4 ++\cf3 ) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3 [] p1 \cf4 =\cf3  
\f2\b \cf5 new
\f0\b0 \cf3  
\f2\b \cf8 double
\f0\b0 \cf3 []\{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][0]),
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][1]),
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][2])
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \};
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3 [] p2 \cf4 =\cf3  
\f2\b \cf5 new
\f0\b0 \cf3  
\f2\b \cf8 double
\f0\b0 \cf3 []\{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][3]),
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][4]),
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 Double.valueOf(D[k][5])
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \};
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Create Cut Line 3D dataset
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 i \cf4 =\cf3  k\cf4 +\cf3 1;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset().create(\cf6 "cln"\cf4 +\cf3 i, \cf6 "CutLine3D"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical().create(\cf6 "evfpU"\cf4 +\cf3 i, \cf6 "Eval"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical().create(\cf6 "av"\cf4 +\cf3 i, \cf6 "AvLine"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(\cf6 "cln"\cf4 +\cf3 i)
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 .set(\cf6 "genpoints"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  
\f2\b \cf8 double
\f0\b0 \cf3 [][]\{p1, p2\});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).set(\cf6 "data"\cf3 , \cf6 "cln"\cf4 +\cf3 i);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).set(\cf6 "table"\cf3 , \cf6 "tbl1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).set(\cf6 "expr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "fp.U"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).set(\cf6 "unit"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "m/s"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).set(\cf6 "descr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "Velocity magnitude"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (i \cf4 ==\cf3  1)
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).setResult();
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (i \cf4 >\cf3  1)
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 model.result().numerical(\cf6 "av"\cf4 +\cf3 i).appendResult();
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 //model.result().table("tbl1")
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \cf2 //\'a0 .save("\\\\\\\\Client\\\\H$\\\\Documents\\\\Restuls_Axial_Vel.txt");
\f1\fs32 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \cf2 //_____________________________________________________________________________________________________________________
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \cf2 // Create cylindrical surfaces to extract WSS
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 // import the same csv file used to create the network
\f1\fs32 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f3\i\fs17\fsmilli8667 \cf7 importFile
\f0\i0 \cf3 (\cf6 "file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 String[][] D \cf4 =\cf3  
\f3\i \cf7 readCSVFile
\f0\i0 \cf3 (\cf6 "upload:///file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // Clear previous parametric surfaces
\f1\fs32 \cf3 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (String tag : model.result().dataset().tags()) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (tag.startsWith(\cf6 "ps"\cf3 )) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0 model.result().dataset().remove(tag);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // D.length can replace 2 for full run
\f1\fs32 \cf3 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (
\f2\b \cf8 int
\f0\b0 \cf3  k \cf4 =\cf3  0; k \cf4 <\cf3  D.length; k\cf4 ++\cf3 ) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Parse values
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P1_x \cf4 =\cf3  Double.valueOf(D[k][0]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P1_y \cf4 =\cf3  Double.valueOf(D[k][1]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P1_z \cf4 =\cf3  Double.valueOf(D[k][2]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P2_x \cf4 =\cf3  Double.valueOf(D[k][3]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P2_y \cf4 =\cf3  Double.valueOf(D[k][4]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  P2_z \cf4 =\cf3  Double.valueOf(D[k][5]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  R_cyl \cf4 =\cf3  Double.valueOf(D[k][9]);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Axis vector
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ax \cf4 =\cf3  P2_x\cf4 -\cf3 P1_x;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ay \cf4 =\cf3  P2_y\cf4 -\cf3 P1_y;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  az \cf4 =\cf3  P2_z\cf4 -\cf3 P1_z;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  L_axis \cf4 =\cf3  Math.sqrt(ax\cf4 *\cf3 ax\cf4 +\cf3 ay\cf4 *\cf3 ay\cf4 +\cf3 az\cf4 *\cf3 az);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (L_axis \cf4 <\cf3  1e-12) 
\f2\b \cf5 continue
\f0\b0 \cf3 ;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  nx \cf4 =\cf3  ax\cf4 /\cf3 L_axis;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ny \cf4 =\cf3  ay\cf4 /\cf3 L_axis;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  nz \cf4 =\cf3  az\cf4 /\cf3 L_axis;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Perpendicular vectors
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  Ax_use \cf4 =\cf3  (Math.abs(nx) \cf4 >\cf3  0.99) \cf4 ?\cf3  0.0 : 1.0;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  Ay_use \cf4 =\cf3  (Math.abs(nx) \cf4 >\cf3  0.99) \cf4 ?\cf3  1.0 : 0.0;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  Az_use \cf4 =\cf3  0.0;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ux \cf4 =\cf3  ny\cf4 *\cf3 Az_use\cf4 -\cf3 nz\cf4 *\cf3 Ay_use;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  uy \cf4 =\cf3  nz\cf4 *\cf3 Ax_use\cf4 -\cf3 nx\cf4 *\cf3 Az_use;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  uz \cf4 =\cf3  nx\cf4 *\cf3 Ay_use\cf4 -\cf3 ny\cf4 *\cf3 Ax_use;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ulen \cf4 =\cf3  Math.sqrt(ux\cf4 *\cf3 ux\cf4 +\cf3 uy\cf4 *\cf3 uy\cf4 +\cf3 uz\cf4 *\cf3 uz);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf5 if
\f0\b0 \cf3  (ulen \cf4 <\cf3  1e-12) 
\f2\b \cf5 continue
\f0\b0 \cf3 ;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  ux_hat \cf4 =\cf3  ux\cf4 /\cf3 ulen;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  uy_hat \cf4 =\cf3  uy\cf4 /\cf3 ulen;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  uz_hat \cf4 =\cf3  uz\cf4 /\cf3 ulen;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  wx_hat \cf4 =\cf3  ny\cf4 *\cf3 uz_hat\cf4 -\cf3 nz\cf4 *\cf3 uy_hat;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  wy_hat \cf4 =\cf3  nz\cf4 *\cf3 ux_hat\cf4 -\cf3 nx\cf4 *\cf3 uz_hat;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f2\b \cf8 double
\f0\b0 \cf3  wz_hat \cf4 =\cf3  nx\cf4 *\cf3 uy_hat\cf4 -\cf3 ny\cf4 *\cf3 ux_hat;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Define unique suffix
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 String s \cf4 =\cf3  \cf6 "_"\cf4 +\cf3 k;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Store parameters in the default group
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "P1_x"\cf4 +\cf3 s, P1_x);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "P1_y"\cf4 +\cf3 s, P1_y);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "P1_z"\cf4 +\cf3 s, P1_z);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "L_axis"\cf4 +\cf3 s, L_axis);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "R_cyl"\cf4 +\cf3 s, R_cyl);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "nx"\cf4 +\cf3 s, nx);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "ny"\cf4 +\cf3 s, ny);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "nz"\cf4 +\cf3 s, nz);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "ux_hat"\cf4 +\cf3 s, ux_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "uy_hat"\cf4 +\cf3 s, uy_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "uz_hat"\cf4 +\cf3 s, uz_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "wx_hat"\cf4 +\cf3 s, wx_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "wy_hat"\cf4 +\cf3 s, wy_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.param().set(\cf6 "wz_hat"\cf4 +\cf3 s, wz_hat);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 // Create ParSurface dataset
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 String datasetTag \cf4 =\cf3  \cf6 "ps"\cf4 +\cf3 (k\cf4 +\cf3 1);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset().create(datasetTag, \cf6 "ParSurface"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 //model.result().dataset(datasetTag).set("data", "dset1");
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "par1"\cf3 , \cf6 "theta"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "parmin1"\cf3 , \cf6 "0"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "parmax1"\cf3 , \cf6 "2*pi"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "res1"\cf3 , \cf6 "180"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "par2"\cf3 , \cf6 "s_axial"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "parmin2"\cf3 , \cf6 "0"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "parmax2"\cf3 , \cf6 "1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "res2"\cf3 , \cf6 "50"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "exprx"\cf3 ,
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 "P1_x"\cf4 +\cf3 s\cf4 +\cf6 " + s_axial*L_axis"\cf4 +\cf3 s\cf4 +\cf6 "*nx"\cf4 +\cf3 s\cf4 +
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*cos(theta)*ux_hat"\cf4 +\cf3 s\cf4 +\cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*sin(theta)*wx_hat"\cf4 +\cf3 s);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "expry"\cf3 ,
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 "P1_y"\cf4 +\cf3 s\cf4 +\cf6 " + s_axial*L_axis"\cf4 +\cf3 s\cf4 +\cf6 "*ny"\cf4 +\cf3 s\cf4 +
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*cos(theta)*uy_hat"\cf4 +\cf3 s\cf4 +\cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*sin(theta)*wy_hat"\cf4 +\cf3 s);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().dataset(datasetTag).set(\cf6 "exprz"\cf3 ,
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 "P1_z"\cf4 +\cf3 s\cf4 +\cf6 " + s_axial*L_axis"\cf4 +\cf3 s\cf4 +\cf6 "*nz"\cf4 +\cf3 s\cf4 +
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*cos(theta)*uz_hat"\cf4 +\cf3 s\cf4 +\cf6 " + R_cyl"\cf4 +\cf3 s\cf4 +\cf6 "*sin(theta)*wz_hat"\cf4 +\cf3 s);
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f0\fs17\fsmilli8667 \cf2 // update solution after running this method for the surfaces to be able to take the global parameters
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 //_____________________________________________________________________________________________________________________
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 // Evaluate the WSS on the cylindrical surface and store it in an object in export and export it as txt file
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f3\i\fs17\fsmilli8667 \cf7 importFile
\f0\i0 \cf3 (\cf6 "file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 String[][] D \cf4 =\cf3  
\f3\i \cf7 readCSVFile
\f0\i0 \cf3 (\cf6 "upload:///file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (
\f2\b \cf8 int
\f0\b0 \cf3  k \cf4 =\cf3  0; k \cf4 <\cf3  D.length; k\cf4 ++\cf3 ) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export().create(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1), \cf6 "Data"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "data"\cf3 , \cf6 "ps"\cf4 +\cf3 (k\cf4 +\cf3 1));
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "expr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "fp.mu*fp.sr"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "unit"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "Pa"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "descr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 ""\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 //model.result().export("data"+(k+1)).set("filename", filename1);
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "filename"\cf3 , \cf6 \'94file location and file name to save your export file"\cf4 +\cf3 (k\cf4 +\cf3 1)\cf4 +\cf6 ".txt"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 //model.result().export("data"+(k+1)).run();
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 //_____________________________________________________________________________________________________________________
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 \'a0
\f1\fs32 \cf3 \
\pard\pardeftab720\partightenfactor0

\f0\fs17\fsmilli8667 \cf2 // Evaluate the radial velocity (interstitial leakage) on the cylindrical surface and store it in an object in export // and export it as txt file
\f1\fs32 \cf3 \
\pard\pardeftab720\sl208\partightenfactor0

\f3\i\fs17\fsmilli8667 \cf7 importFile
\f0\i0 \cf3 (\cf6 "file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 String[][] D \cf4 =\cf3  
\f3\i \cf7 readCSVFile
\f0\i0 \cf3 (\cf6 "upload:///file1"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf8 int
\f0\b0 \cf3  i \cf4 =\cf3  0;
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf8 int
\f0\b0 \cf3  j \cf4 =\cf3  0;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0
\f1\fs32 \

\f2\b\fs17\fsmilli8667 \cf5 for
\f0\b0 \cf3  (
\f2\b \cf8 int
\f0\b0 \cf3  k \cf4 =\cf3  D.length; k \cf4 <\cf3  (2\cf4 *\cf3 D.length); k\cf4 ++\cf3 ) \{
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export().create(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1), \cf6 "Data"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 i \cf4 =\cf3  i\cf4 +\cf3 1;
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "data"\cf3 , \cf6 "ps"\cf4 +\cf3 i);
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "expr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "u2*(cos(theta)*ux_hat_"\cf4 +\cf3 j\cf4 +\cf6 "+ sin(theta)*wx_hat_"\cf4 +\cf3 j\cf4 +\cf6 ")+ v2*(cos(theta)*uy_hat_"\cf4 +\cf3 j\cf4 +\cf6 " + sin(theta)*wy_hat_"\cf4 +\cf3 j\cf4 +\cf6 ")+ w2*(cos(theta)*uz_hat_"\cf4 +\cf3 j\cf4 +\cf6 " + sin(theta)*wz_hat_"\cf4 +\cf3 j\cf4 +\cf6 ")"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "unit"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 "Pa"\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "descr"\cf3 , 
\f2\b \cf5 new
\f0\b0 \cf3  String[]\{\cf6 ""\cf3 \});
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 //model.result().export("data"+(k+1)).set("filename", filename1);
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 model.result().export(\cf6 "data"\cf4 +\cf3 (k\cf4 +\cf3 1)).set(\cf6 "filename"\cf3 , \cf6 file location and file name to save your export file "\cf4 +\cf3 i\cf4 +\cf6 ".txt"\cf3 );
\f1\fs32 \

\f0\fs17\fsmilli8667 \'a0 \cf2 //model.result().export("data"+(k+1)).run();
\f1\fs32 \cf3 \

\f0\fs17\fsmilli8667 \'a0 j \cf4 =\cf3  j\cf4 +\cf3 1;
\f1\fs32 \

\f0\fs17\fsmilli8667 \}
\f1\fs32 \
}